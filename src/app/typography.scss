@use './variables.scss';

$large-screen: 20px;
$small-screen: 10px;
$base-font-size: .3rem !default;
// Flow Text
$intervals: 40 !default;
$range: $large-screen - $small-screen !default;
$interval-size:calc( $range / $intervals);

@font-face {
  font-family: roboto-regular;
  src: url('../../assets/fonts/Cormorant/CormorantGaramond-Italic.ttf');
}

@font-face {
  font-family: roboto-light;
  src: url('../../assets/fonts/Cormorant/CormorantGaramond-Regular.ttf');
}
@tailwind base;
@tailwind components;
@tailwind utilities;
* {
  padding: 0;
  margin: 0;
}

html {
  box-sizing: border-box;
  font-family: roboto-regular, sans-serif !important;
  width: 100%;
  height: 100%;
}

*, *:before, *:after {
  font-family: roboto-regular, sans-serif !important;
  //box-sizing: inherit; // така казваме на елементите да гледат парента и да взема стиловете спрямо него
}

/* Typography */

//html {
//  font: var(--sizing-fs-base)/1.5 "font-family", serif;
//}
//
//@media (max-width: 400px) {
//  html {
//    font-size: var(--sizing-fs-phone);
//  }
//}
//
//@media (min-width: 600px) {
//  html {
//    font-size: var(--sizing-fs-tablet);
//  }
//}
//
//@media (min-width: 1260px) {
//  html {
//    font-size: var(--sizing-fs-laptop);
//  }
//}

p, ul, ol {
  padding-bottom: .5em;
}

//h1, h2, h3, h4, h5, h6 {
//  margin: 0 0 calc(var(--sizing-ws-base) / 7) 0;
//}

// Credit to materialize css
// https://github.com/Dogfalo/materialize/blob/master/sass/components/_typography.scss
// Auto resizes text to be more readable
h1 {
  font-weight: 600;
  $i: 0;
  @while $i <= $intervals {
    @media only screen and (min-width: 360 + ($i * $interval-size)) {
      font-size: $base-font-size * (1.2 + (.06 * $i));
    }
    $i: $i + 1;
  }
}

h2 {
  font-weight: 500;
  $i: 0;
  @while $i <= $intervals {
    @media only screen and (min-width: 360 + ($i * $interval-size)) {
      font-size: $base-font-size * (1.1 + (.3 * $i));
    }
    $i: $i + 1;
  }
}

h3 {
  font-weight: 400;
  $i: 0;
  @while $i <= $intervals {
    @media only screen and (min-width: 360 + ($i * $interval-size)) {
      font-size: $base-font-size * (1 + (.2 * $i));
    }
    $i: $i + 1;
  }
}

h4 {
  $i: 0;
  @while $i <= $intervals {
    @media only screen and (min-width: 360 + ($i * $interval-size)) {
      font-size: $base-font-size * (.9 + (.1 * $i));
    }
    $i: $i + 1;
  }
}

h5 {
  $i: 0;
  @while $i <= $intervals {
    @media only screen and (min-width: 360 + ($i * $interval-size)) {
      font-size: $base-font-size * (.1 + (.09 * $i));
    }
    $i: $i + 1;
  }
}

h6 {
  $i: 0;
  @while $i <= $intervals {
    @media only screen and (min-width: 390 + ($i * $interval-size)) {
      font-size: $base-font-size * (.02 + (.2 * $i));
    }
    $i: $i + 1;
  }
}

q {
  $i: 0;
  @while $i <= $intervals {
    @media only screen and (min-width: 360 + ($i * $interval-size)) {
      font-size: $base-font-size * (.6 + (.1 * $i));
    }
    $i: $i + 1;
  }
}

p {
  $i: 0;
  @while $i <= $intervals {
    @media only screen and (min-width: calc(440px + #{$i * $interval-size})) {
      font-size: $base-font-size * (6 + (.03 * $i));
    }
    $i: $i + 1;
  }
}
p {
  $i: 0;
  @while $i <= $intervals {
    @media only screen and (max-width: calc(360px + #{$i * $interval-size})) {
      font-size: $base-font-size * (.4 + (.03 * $i));
    }
    $i: $i + 1;
  }
} 
span {
  $i: 0;
  @while $i <= $intervals {
    @media only screen and (min-width: calc(360px + #{$i * $interval-size})) {
      font-size: $base-font-size * (3 + (.03 * $i));
    }
    $i: $i + 1;
  }
}